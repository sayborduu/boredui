return(function()local CRYPTEDlIIIIlIl = "lol you have to stop trying to deobfuscate";local CRYPTEDlIIIIlIl = "lol you have to stop trying to deobfuscate";local CRYPTEDlIIIIlIl = "lol you have to stop trying to deobfuscate";local CRYPTEDlIIllllI=47;local CRYPTEDlIIlllIl=298;local CRYPTEDlIIlllII=3;local CRYPTEDlIIlIllI=function(a)local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';a=string.gsub(a,'[^'..b..'=]','')return a:gsub('.',function(c)if c=='='then return''end;local d,e='',b:find(c)-1;for f=6,1,-1 do d=d..(e%2^f-e%2^(f-1)>0 and'1'or'0')end;return d end):gsub('%d%d%d?%d?%d?%d?%d?%d?',function(c)if#c~=8 then return''end;local g=0;for f=1,8 do g=g+(c:sub(f,f)=='1'and 2^(8-f)or 0)end;return string.char(g)end)end;local CRYPTEDlIIlllIl=45;local CRYPTEDlIIlIlIl=(function()local function a(b)local c={}for d=0,255 do c[d]={}end;c[0][0]=b[1]*255;local e=1;for f=0,7 do for d=0,e-1 do for g=0,e-1 do local h=c[d][g]-b[1]*e;c[d][g+e]=h+b[2]*e;c[d+e][g]=h+b[3]*e;c[d+e][g+e]=h+b[4]*e end end;e=e*2 end;return c end;local i=a{0,1,1,0}local function j(self,k)local l,d,g=self.S,self.i,self.j;local m={}local n=string.char;for o=1,k do d=(d+1)%256;g=(g+l[d])%256;l[d],l[g]=l[g],l[d]m[o]=n(l[(l[d]+l[g])%256])end;self.i,self.j=d,g;return table.concat(m)end;local function p(self,q)local r=j(self,#q)local s={}local t=string.byte;local n=string.char;for d=1,#q do s[d]=n(i[t(q,d)][t(r,d)])end;return table.concat(s)end;local function u(self,v)local l=self.S;local g,w=0,#v;local t=string.byte;for d=0,255 do g=(g+l[d]+t(v,d%w+1))%256;l[d],l[g]=l[g],l[d]end end;function new(v)local l={}local s={S=l,i=0,j=0,generate=j,cipher=p,schedule=u}for d=0,255 do l[d]=d end;if v then s:schedule(v)end;return s end;return new end)();local fev=getfenv or function()return _ENV end;local CRYPTEDlIIlIlII=(function()local a=false;local b=string.unpack;local c=table.pack;local d=table.create;local e=table.move;local f=coroutine.create;local g=coroutine.yield;local h=coroutine.resume;local i=tonumber;local j=pcall;local function k()return{slist={},plist={}}end;local function l()return{code={},k={},protos={}}end;local m={{"NOP",0},{"BREAK",0},{"LOADNIL",1},{"LOADB",3},{"LOADN",4},{"LOADK",4},{"MOVE",2},{"GETGLOBAL",1,true},{"SETGLOBAL",1,true},{"GETUPVAL",2},{"SETUPVAL",2},{"CLOSEUPVALS",1},{"GETIMPORT",4,true},{"GETTABLE",3},{"SETTABLE",3},{"GETTABLEKS",3,true},{"SETTABLEKS",3,true},{"GETTABLEN",3},{"SETTABLEN",3},{"NEWCLOSURE",4},{"NAMECALL",3,true},{"CALL",3},{"RETURN",2},{"JUMP",4},{"JUMPBACK",4},{"JUMPIF",4},{"JUMPIFNOT",4},{"JUMPIFEQ",4,true},{"JUMPIFLE",4,true},{"JUMPIFLT",4,true},{"JUMPIFNOTEQ",4,true},{"JUMPIFNOTLE",4,true},{"JUMPIFNOTLT",4,true},{"ADD",3},{"SUB",3},{"MUL",3},{"DIV",3},{"MOD",3},{"POW",3},{"ADDK",3},{"SUBK",3},{"MULK",3},{"DIVK",3},{"MODK",3},{"POWK",3},{"AND",3},{"OR",3},{"ANDK",3},{"ORK",3},{"CONCAT",3},{"NOT",2},{"MINUS",2},{"LENGTH",2},{"NEWTABLE",2,true},{"DUPTABLE",4},{"SETLIST",3,true},{"FORNPREP",4},{"FORNLOOP",4},{"FORGLOOP",4,true},{"FORGPREP_INEXT",4},{"LOP_DEP_FORGLOOP_INEXT",0},{"FORGPREP_NEXT",4},{"LOP_DEP_FORGLOOP_NEXT",0},{"GETVARARGS",2},{"DUPCLOSURE",4},{"PREPVARARGS",1},{"LOADKX",1,true},{"JUMPX",5},{"FASTCALL",3},{"COVERAGE",5},{"CAPTURE",2},{"LOP_DEP_JUMPIFEQK",0},{"LOP_DEP_JUMPIFNOTEQK",0},{"FASTCALL1",3},{"FASTCALL2",3,true},{"FASTCALL2K",3,true},{"FORGPREP",4},{"JUMPXEQKNIL",4,true},{"JUMPXEQKB",4,true},{"JUMPXEQKN",4,true},{"JUMPXEQKS",4,true}}local n={}for a,b in next,m do if b[3]then table.insert(n,a)end end;local o=-1;local p=-2;local function q(a)local c=1;local d=k()local e=d.slist;local f=d.plist;local function g()local a=b(">B",a,c)c=c+1;return a end;local function h()local a=b("I4",a,c)c=c+4;return a end;local function i()local a=0;for b=0,7 do local c=g()a=bit32.bor(a,bit32.lshift(bit32.band(c,127),b*7))if bit32.band(c,128)==0 then break end end;return a end;local function j()local d=i()local e;if d==0 then return""else e=b("c"..d,a,c)c=c+d end;return e end;local function k(a)local b={}local c=h()local d=bit32.band(c,255)b.value=c;b.opcode=d;local e=m[d+1]b.opname=e[1]local e=e[2]b.type=e;local e=b.type;if e==3 then b.A=bit32.band(bit32.rshift(c,8),255)b.B=bit32.band(bit32.rshift(c,16),255)b.C=bit32.band(bit32.rshift(c,24),255)elseif e==2 then b.A=bit32.band(bit32.rshift(c,8),255)b.B=bit32.band(bit32.rshift(c,16),255)elseif e==1 then b.A=bit32.band(bit32.rshift(c,8),255)elseif e==4 then b.A=bit32.band(bit32.rshift(c,8),255)local a=bit32.band(bit32.rshift(c,16),65535)b.D=a<32768 and a or a-65536 elseif e==5 then local a=bit32.band(bit32.rshift(c,8),16777215)b.E=a<8388608 and a or a-16777216 end;if table.find(n,d+1)then local c=h()b.aux=c;table.insert(a,b)table.insert(a,{value=c})return true end;table.insert(a,b)return false end;local function m()local e=l()e.maxstacksize=g()e.numparams=g()e.nups=g()e.isvararg=g()~=0;local f=e.code;local j=i()e.sizecode=j;local l=false;for a=1,j do if l then l=false;continue end;l=k(f)end;local f=e.k;local k=i()e.sizek=k;for e=1,k do local e=g()local j;if e==0 then j=nil elseif e==1 then j=g()~=0 elseif e==2 then local a=b("d",a,c)c=c+8;j=a elseif e==3 then j=d.slist[i()]elseif e==4 then j=h()elseif e==5 then local a={}local b=i()for b=1,b do table.insert(a,i())end;j=a elseif e==6 then j=i()end;table.insert(f,j)end;local a=i()local b=e.protos;e.sizep=a;for a=1,a do table.insert(b,i())end;i()i()if g()~=0 then local a=g()for a=1,j do g()end;local a=bit32.rshift(j-1,a)+1;for a=1,a do h()end end;if g()~=0 then local a=i()for a=1,a do i()i()i()g()end end;return e end;local b=g()local b=i()for a=1,b do table.insert(e,j())end;local b=i()for a=1,b do table.insert(f,m())end;d.mainp=i()assert(c==#a+1,"Deserializer position mismatch")return d end;local function b(b,k)if type(b)=="string"then b=q(b)end;local l=b.plist;local m=l[b.mainp+1]local function n(b,m,q)local function r(a,j,r,r,s)local t,u,v,w=-1,1,{},{}local x=m.k;while true do local y=r[u]local z=y.opcode;u+=1;a.pc=u;a.name=y.opname;if z==2 then j[y.A]=nil elseif z==3 then j[y.A]=y.B~=0;u+=y.C elseif z==4 then j[y.A]=y.D elseif z==5 then j[y.A]=x[y.D+1]elseif z==6 then j[y.A]=j[y.B]elseif z==7 then u+=1;local a=x[aux+1]assert(type(a)=="string","GETGLOBAL encountered non-string constant!")j[y.A]=k[a]elseif z==8 then u+=1;local a=x[y.aux+1]assert(type(a)=="string","GETGLOBAL encountered non-string constant!")k[a]=j[y.A]elseif z==9 then local a=q[y.B+1]j[y.A]=a.store[a.index]elseif z==10 then local a=q[y.B+1]a.store[a.index]=j[y.A]elseif z==11 then for a,b in v do if b.index>=y.A then b.value=b.store[b.index]b.store=b;b.index="value"v[a]=nil end end elseif z==12 then u+=1;local a=y.aux;local b=bit32.rshift(a,30)local c=bit32.band(bit32.rshift(a,20),1023)if b==1 then j[y.A]=k[x[c+1]]elseif b==2 then local a=bit32.band(bit32.rshift(a,10),1023)j[y.A]=k[x[c+1]][x[a+1]]elseif b==3 then local b=bit32.band(bit32.rshift(a,10),1023)local a=bit32.band(bit32.rshift(a,0),1023)j[y.A]=k[x[c+1]][x[b+1]][x[a+1]]end elseif z==13 then j[y.A]=j[y.B][j[y.C]]elseif z==14 then j[y.B][j[y.C]]=j[y.A]elseif z==15 then u+=1;local a=x[y.aux+1]j[y.A]=j[y.B][a]elseif z==16 then u+=1;local a=x[y.aux+1]j[y.B][a]=j[y.A]elseif z==17 then j[y.A]=j[y.B][y.C]elseif z==18 then j[y.B][y.C]=j[y.A]elseif z==19 then local a=l[y.D+1]local c={}for a=1,a.nups do local b=r[u]local d=b.opcode;u+=1;assert(d==70,"Unhandled opcode passed to NEWCLOSURE")local d=b.A;if d==0 then local b={value=j[b.B],index="value"}b.store=b;c[a]=b elseif d==1 then local b=b.B;local d=v[b]if d==nil then d={index=b,store=j}v[b]=d end;c[a]=d elseif d==2 then c[a]=q[b.B]end end;j[y.A]=n(b,a,c)elseif z==20 then u+=1;local a=y.A;local b=y.B;local c=x[y.aux+1]assert(type(c)=="string","NAMECALL encountered non-string constant!")j[a+1]=j[b]j[a]=j[b][c]elseif z==21 then local a,b,d=y.A,y.B,y.C;local b=b==0 and t-a or b-1;local b=c(j[a](table.unpack(j,a+1,a+b)))local c=b.n;if d==0 then t=a+c-1 else c=d-1 end;e(b,1,c,a,j)elseif z==22 then local a=y.A;local b=y.B;local c=b-1;local d;if c==o then d=t-a+1 else d=a+b-1-m.numparams end;return table.unpack(j,a,a+d-1)elseif z==23 then u+=y.D elseif z==24 then u+=y.D elseif z==25 then if j[y.A]then u+=y.D end elseif z==26 then if not j[y.A]then u+=y.D end elseif z==27 then if j[y.A]==j[y.aux]then u+=y.D else u+=1 end elseif z==28 then if j[y.A]<j[y.aux]then u+=y.D else u+=1 end elseif z==29 then if j[y.A]<=j[y.aux]then u+=y.D else u+=1 end elseif z==30 then if j[y.A]==j[y.aux]then u+=1 else u+=y.D end elseif z==31 then if j[y.A]<j[y.aux]then u+=1 else u+=y.D end elseif z==32 then if j[y.A]<=j[y.aux]then u+=1 else u+=y.D end elseif z==33 then j[y.A]=j[y.B]+j[y.C]elseif z==34 then j[y.A]=j[y.B]-j[y.C]elseif z==35 then j[y.A]=j[y.B]*j[y.C]elseif z==36 then j[y.A]=j[y.B]/j[y.C]elseif z==37 then j[y.A]=j[y.B]%j[y.C]elseif z==38 then j[y.A]=j[y.B]^j[y.C]elseif z==39 then j[y.A]=j[y.B]+x[y.C+1]elseif z==40 then j[y.A]=j[y.B]-x[y.C+1]elseif z==41 then j[y.A]=j[y.B]*x[y.C+1]elseif z==42 then j[y.A]=j[y.B]/x[y.C+1]elseif z==43 then j[y.A]=j[y.B]%x[y.C+1]elseif z==44 then j[y.A]=j[y.B]^x[y.C+1]elseif z==45 then local a=j[y.B]if not not a==false then j[y.A]=a else j[y.A]=j[y.C]or false end elseif z==46 then local a=j[y.B]if not not a==true then j[y.A]=a else j[y.A]=j[y.C]or false end elseif z==47 then local a=j[y.B]if not not a==false then j[y.A]=a else j[y.A]=x[y.C+1]or false end elseif z==48 then local a=j[y.B]if not not a==true then j[y.A]=a else j[y.A]=x[y.C+1]or false end elseif z==49 then local a=""for b=y.B,y.C do a..=j[b]end;j[y.A]=a elseif z==50 then j[y.A]=not j[y.B]elseif z==51 then j[y.A]=-j[y.B]elseif z==52 then j[y.A]=#j[y.B]elseif z==53 then u+=1;j[y.A]=d(y.aux)elseif z==54 then local a=x[y.D+1]local b={}for a,a in a do b[x[a+1]]=nil end;j[y.A]=b elseif z==55 then u+=1;local a=y.A;local b=y.B;local c=y.C-1;if c==o then c=t-b end;e(j,b,b+c,y.aux,j[a])elseif z==56 then local a=y.A;local b=j[a]if type(b)~="number"then local c=i(b)if c==nil then error("invalid 'for' limit (number expected)")end;j[a]=c;b=c end;local c=j[a+1]if type(c)~="number"then local b=i(c)if b==nil then error("invalid 'for' step (number expected)")end;j[a+1]=b;c=b end;local d=j[a+2]if type(d)~="number"then local b=i(d)if b==nil then error("invalid 'for' index (number expected)")end;j[a+2]=b;d=b end;local a=false;if c==math.abs(c)then a=d>=b else a=d<=b end;if a then u+=y.D end elseif z==57 then local a=y.A;local b=j[a]local c=j[a+1]local d=j[a+2]+c;local e=false;if c==math.abs(c)then e=d<=b else e=d>=b end;if e then j[a+2]=d;u+=y.D end elseif z==58 then local a=y.A;local b=y.aux;t=a+6;local c=j[a]if type(c)=="function"then local c={j[a](j[a+1],j[a+2])}e(c,1,b,a+3,j)if j[a+3]~=nil then j[a+2]=j[a+3]u+=y.D else u+=1 end else local c,c=h(w[y])if c==p then u+=1 else e(c,1,b,a+3,j)j[a+2]=j[a+3]u+=y.D end end elseif z==59 then if type(j[y.A])~="function"then error("FORGPREP_INEXT encountered non-function value")end;u+=y.D elseif z==61 then if type(j[y.A])~="function"then error("FORGPREP_NEXT encountered non-function value")end;u+=y.D elseif z==63 then local a=y.A;local b=y.B-1;if b==o then b=s.len;t=a+b-1 end;e(s.list,1,b,a,j)elseif z==64 then local a=l[x[y.D+1]+1]local c={}for a=1,a.nups do local b=r[u]local d=b.opcode;u+=1;assert(d==70,"Unhandled opcode passed to DUPCLOSURE")local d=b.A;if d==0 then local b={value=j[b.B],index="value"}b.store=b;c[a]=b elseif d==2 then c[a]=q[b.B]end end;j[y.A]=n(b,a,c)elseif z==65 then elseif z==66 then u+=1;local a=x[y.aux+1]assert(type(a)=="string","LOADKX encountered non-string constant!")j[y.A]=a elseif z==67 then u+=y.E elseif z==68 then elseif z==70 then error("Unhandled CAPTURE")elseif z==73 then elseif z==74 then u+=1 elseif z==75 then u+=1 elseif z==76 then local a=j[y.A]if type(a)~="function"then local b=r[u+y.D]if w[b]==nil then local function c()for a,b,c,d,e,f,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,tb,ub,vb,wb,xb,yb,zb,Ab,Bb,Cb,Db,Eb,Fb,Gb,Hb,Ib,Jb,Kb,Lb,Mb,Nb,Ob,Pb,Qb,Rb,Sb,Tb,Ub,Vb,Wb,Xb,Yb,Zb,ac,bc,cc,dc,ec,fc,gc,hc,ic,jc,kc,lc,mc,nc,oc,pc,qc,rc,sc,tc,uc,vc,wc,xc,yc,zc,Ac,Bc,Cc,Dc,Ec,Fc,Gc,Hc,Ic,Jc,Kc,Lc,Mc,Nc,Oc,Pc,Qc,Rc,Sc,Tc,Uc,Vc,Wc,Xc,Yc,Zc,ad,bd,cd,dd,ed,fd,gd,hd,id,jd,kd,ld,md,nd,od,pd,qd,rd,sd,td,ud,vd,wd,xd,yd,zd,Ad,Bd,Cd,Dd,Ed,Fd,Gd,Hd,Id,Jd,Kd,Ld,Md,Nd,Od,Pd,Qd,Rd,Sd in a do g({a,b,c,d,e,f,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,tb,ub,vb,wb,xb,yb,zb,Ab,Bb,Cb,Db,Eb,Fb,Gb,Hb,Ib,Jb,Kb,Lb,Mb,Nb,Ob,Pb,Qb,Rb,Sb,Tb,Ub,Vb,Wb,Xb,Yb,Zb,ac,bc,cc,dc,ec,fc,gc,hc,ic,jc,kc,lc,mc,nc,oc,pc,qc,rc,sc,tc,uc,vc,wc,xc,yc,zc,Ac,Bc,Cc,Dc,Ec,Fc,Gc,Hc,Ic,Jc,Kc,Lc,Mc,Nc,Oc,Pc,Qc,Rc,Sc,Tc,Uc,Vc,Wc,Xc,Yc,Zc,ad,bd,cd,dd,ed,fd,gd,hd,id,jd,kd,ld,md,nd,od,pd,qd,rd,sd,td,ud,vd,wd,xd,yd,zd,Ad,Bd,Cd,Dd,Ed,Fd,Gd,Hd,Id,Jd,Kd,Ld,Md,Nd,Od,Pd,Qd,Rd,Sd})end;g(p)end;w[b]=f(c)end end;u+=y.D elseif z==77 then if(j[y.A]==nil and 0 or 1)==bit32.rshift(y.aux,31)then u+=y.D else u+=1 end elseif z==78 then local a=y.aux;if((j[y.A]and 0 or 1)==(bit32.band(a,1)and 0 or 1))==bit32.rshift(a,31)then u+=y.D else u+=1 end elseif z==79 then local a=y.aux;local b=x[bit32.band(a,16777215)+1]assert(type(b)=="number","JUMPXEQKN encountered non-number constant!")local c=j[y.A]if bit32.rshift(a,31)==0 then u+=c==b and y.D or 1 else u+=c~=b and y.D or 1 end elseif z==80 then local a=y.aux;local b=x[bit32.band(a,16777215)+1]assert(type(b)=="string","JUMPXEQKS encountered non-string constant!")if((b==j[y.A])and 0 or 1)~=bit32.rshift(a,31)then u+=y.D else u+=1 end else error("Unsupported Opcode: "..y.opname.." op: "..z)end end end;local function b(...)local b=c(...)local d=d(m.maxstacksize)local f={len=0,list={}}e(b,1,m.numparams,0,d)if m.numparams<b.n then local a=m.numparams+1;local c=b.n-m.numparams;f.len=c;e(b,a,a+c-1,1,f.list)end;local b={}local e;if not a then e=c(j(r,b,d,m.protos,m.code,f))else e=c(true,r(b,d,m.protos,m.code,f))end;if e[1]then return table.unpack(e,2,e.n)else error(string.format("Fiu VM Error PC: %s Opcode: %s: \n%s",b.pc,b.name,e[2]),0)end end;return b end;return n(b,m)end;local rrr={luau_load=b,luau_newproto=l,luau_newmodule=k,luau_deserialize=q};return rrr.luau_load;end)();local CRYPTEDlIIllIll='\101\108\73\57\77\88\78\110\76\49\115\108\85\81\61\61';local CRYPTEDlIIlIIIl="\110\56\79\72\101\106\106\113\70\67\71\49\90\104\70\118\108\51\107\74\69\78\90\89\75\66\50\68\97\119\100\81\88\69\82\66\122\88\88\54\105\104\105\120\71\101\71\54\117\100\115\106\114\50\83\106\116\88\77\87\99\107\117\104\56\83\54\66\68\72\54\72\51\104\86\78\98\89\85\120\65\107\85\107\52\55\84\111\98\89\112\75\66\52\72\78\76\66\109\101\100\82\70\56\82\120\57\47\70\117\114\51\106\89\114\76\74\68\107\54\112\68\70\105\75\82\55\104\114\99\103\73\118\111\55\98\43\105\113\84\78\100\103\97\97\113\67\65\118\104\82\98\105\82\52\53\88\106\78\48\102\73\119\119\118\66\86\70\109\109\115\118\117\70\48\87\98\77\87\70\73\115\55\104\53\68\81\84\119\111\43\49\49\47\89\52\109\51\74\50\71\88\98\70\48\118\97\80\70\72\74\111\108\55\69\119\117\76\47\49\56\75\90\85\101\108\97\87\68\87\69\67\99\81\114\78\66\52\118\117\87\71\81\99\122\121\118\47\57\112\49\105\121\83\73\48\87\43\86\101\79\80\55\104\77\68\89\88\101\121\122\54\50\81\113\106\43\55\76\57\52\83\120\114\48\113\80\97\112\47\83\101\49\107\82\109\67\105\114\87\48\98\83\52\65\75\51\112\43\86\76\89\57\69\52\50\98\49\109\68\54\74\116\120\117\83\106\73\74\71\82\47\67\120\85\82\76\87\103\82\51\72\70\70\43\104\52\102\100\120\109\100\68\55\65\43\109\88\43\52\81\84\75\47\65\55\105\100\103\87\47\111\67\52\118\73\86\103\57\106\83\107\87\76\51\76\78\56\52\74\49\110\86\80\84\50\66\121\80\112\52\67\111\66\75\105\77\50\68\114\119\108\69\65\71\81\109\103\66\116\100\56\120\115\101\86\72\56\49\110\57\114\87\99\122\73\109\105\118\73\108\119\90\56\49\52\52\120\79\98\69\107\88\66\70\77\89\85\103\102\105\57\119\69\54\72\114\69\76\114\121\111\52\85\66\65\108\82\79\103\110\104\84\89\108\115\80\51\120\114\53\76\104\68\85\100\77\114\113\53\112\106\90\109\47\113\100\51\84\67\84\69\121\88\107\69\71\85\69\76\86\102\87\119\122\55\98\66\115\66\72\113\53\82\102\65\120\51\103\50\121\119\90\77\118\122\120\98\122\117\71\66\119\86\90\119\102\110\101\114\83\47\75\105\81\122\53\88\101\115\100\65\115\81\101\79\67\76\56\48\72\74\55\56\66\99\56\121\100\73\101\98\76\114\121\99\122\85\104\90\117\103\105\70\106\43\98\101\83\75\50\106\49\86\52\66\111\117\84\88\71\89\105\85\47\121\81\97\79\54\70\56\110\88\97\100\80\111\53\88\112\71\57\100\114\121\115\100\90\122\108\49\110\84\109\116\107\52\51\110\71\99\67\102\85\78\74\97\114\43\50\120\102\55\88\104\100\107\90\113\99\80\57\88\56\105\48\90\89\53\112\52\88\51\121\72\67\75\53\51\113\71\88\88\106\50\79\109\121\120\47\89\56\87\102\98\98\53\57\88\73\120\71\82\76\88\108\51\66\76\74\67\103\103\75\70\111\65\47\57\107\88\105\57\90\76\109\102\68\112\76\106\75\120\76\101\72\47\75\103\74\120\90\84\68\104\87\67\52\85\71\48\82\118\47\68\70\82\84\65\101\48\56\72\81\120\66\76\119\107\53\101\57\101\99\73\70\48\85\48\68\66\106\113\105\79\65\75\54\65\90\77\65\72\115\55\97\103\88\49\99\69\70\47\66\77\121\87\84\81\85\79\117\101\120\53\106\71\108\121\104\87\87\43\48\65\112\56\111\57\48\83\74\85\43\111\100\117\103\114\75\52\88\121\82\75\101\66\81\81\100\83\107\107\43\116\101\51\120\85\84\97\54\53\76\118\73\86\53\89\69\51\90\98\109\43\99\102\55\70\87\56\115\69\109\110\85\76\48\57\83\48\115\47\43\119\104\82\89\111\105\109\109\122\104\105\104\113\89\85\67\98\81\54\71\78\79\66\89\83\66\102\73\77\98\74\102\116\97\117\76\87\53\111\69\74\116\78\117\55\69\70\77\43\65\113\111\57\103\108\113\74\111\90\102\70\53\107\48\74\82\51\78\81\89\48\98\71\65\115\72\80\72\71\85\97\87\117\77\47\50\78\121\102\43\80\97\76\120\49\115\70\77\106\48\111\114\53\97\52\110\97\102\51\113\69\114\115\50\102\100\89\117\55\112\67\86\110\81\114\50\75\101\101\87\109\120\73\56\67\49\113\51\121\98\120\113\109\77\81\51\113\86\48\119\104\67\115\102\114\104\104\51\83\107\85\118\76\56\83\90\115\97\114\117\116\85\73\50\50\51\114\101\100\83\107\112\109\78\99\87\47\51\73\69\57\106\85\108\82\69\107\79\104\88\114\67\105\81\120\103\81\120\65\83\98\47\117\75\78\86\122\119\89\67\98\65\69\54\79\89\97\79\72\48\76\77\121\78\56\105\47\116\53\80\76\101\110\99\73\82\53\90\51\78\112\87\120\97\86\65\115\102\104\53\103\114\53\99\88\117\55\97\71\106\118\101\117\122\120\50\74\52\73\57\49\82\87\103\53\109\113\97\112\116\53\119\52\108\81\52\86\84\113\103\76\109\100\75\49\105\116\114\79\86\54\89\80\105\66\53\48\108\47\54\84\51\53\51\117\65\79\78\106\90\121\84\121\110\84\65\105\105\66\106\68\105\50\104\88\107\99\52\110\76\105\84\53\86\81\118\78\114\81\55\65\71\87\73\111\82\107\54\87\73\113\119\106\85\104\81\121\90\80\105\71\55\50\88\84\56\97\70\51\109\55\70\101\51\116\86\54\113\71\50\50\97\120\51\121\89\53\89\69\50\56\103\79\102\117\52\57\54\74\71\77\81\104\97\74\87\74\104\48\74\80\108\115\54\114\75\68\81\43\84\54\76\98\72\100\109\102\87\121\43\72\74\120\71\102\97\70\110\70\79\102\89\97\52\50\87\119\51\77\108\122\114\50\103\116\88\108\82\52\112\57\65\51\103\100\81\121\102\68\97\86\48\47\87\100\97\101\112\84\53\84\71\47\101\113\110\84\114\88\116\110\86\77\122\79\68\79\110\88\71\88\120\86\110\111\68\80\65\68\56\104\84\100\107\117\119\70\57\109\77\111\120\113\114\75\51\51\77\113\114\49\68\85\120\50\74\76\108\114\114\67\50\111\74\86\108\102\106\106\80\99\99\89\114\47\79\98\83\102\82\97\78\72\80\105\118\65\108\106\79\89\49\116\51\89\80\113\112\76\118\97\43\48\113\43\47\72\47\105\51\86\106\102\115\70\78\122\108\77\117\54\122\49\122\55\57\66\98\51\49\119\108\75\120\48\77\85\112\119\111\52\100\43\98\78\57\86\120\90\56\69\76\56\53\52\117\97\49\88\102\110\68\84\105\99\79\54\84\53\100\109\101\83\102\122\68\56\113\100\89\117\86\79\102\74\48\103\52\52\49\115\81\90\107\57\101\68\97\82\50\76\98\80\74\54\54\99\50\112\65\87\121\119\55\115\77\65\116\83\108\55\107\115\55\74\103\43\97\100\106\118\43\86\101\102\51\51\100\97\50\120\107\107\65\76\79\78\109\104\100\119\49\105\115\53\85\116\78\55\109\76\111\73\84\119\103\99\65\111\76\76\107\51\54\56\113\70\89\85\90\70\49\118\87\102\66\121\100\74\81\47\57\77\111\43\71\80\101\97\52\103\102\55\118\89\66\66\102\110\66\97\100\107\90\54\47\72\116\104\54\54\52\103\78\122\53\101\105\101\84\70\122\122\113\48\54\52\72\53\110\69\81\71\100\98\116\54\71\51\72\106\84\53\114\75\118\81\50\49\70\57\50\102\80\102\84\82\51\69\103\69\104\122\122\56\89\119\111\122\72\101\56\89\74\71\48\43\86\84\114\85\49\78\78\112\74\113\72\103\108\118\52\110\56\54\110\72\79\112\110\102\115\72\105\89\99\97\71\47\51\106\90\85\88\101\78\119\99\72\107\114\52\48\83\108\77\71\78\50\55\108\100\109\72\54\119\97\56\43\97\113\122\98\115\73\79\87\47\52\82\53\112\50\78\57\50\105\120\85\107\73\109\52\111\108\57\105\108\70\113\77\112\87\86\84\100\122\65\53\55\101\52\51\122\111\76\106\89\85\90\117\113\122\74\48\55\66\86\54\98\104\83\89\69\70\86\67\104\122\84\52\113\73\49\122\85\115\116\119\65\55\119\118\101\56\112\83\81\75\98\75\117\118\76\52\101\121\103\52\111\50\116\113\75\67\57\49\71\75\101\102\81\67\111\52\75\119\88\71\113\114\56\107\51\67\120\66\108\86\114\106\79\71\43\118\121\116\57\54\86\65\83\74\53\53\69\115\108\70\101\103\74\111\121\47\109\56\117\116\108\71\102\116\78\122\97\120\102\86\79\88\71\71\54\43\65\77\74\115\83\77\121\111\75\103\56\43\118\113\121\84\109\67\47\87\56\99\52\84\79\70\72\48\49\86\73\67\51\118\116\80\107\103\108\53\106\122\82\73\114\114\115\99\114\84\112\54\108\56\116\114\56\73\82\71\116\122\113\49\106\53\120\87\66\98\78\109\106\89\109\72\49\109\103\121\75\108\116\65\110\120\56\97\120\51\84\107\55\107\51\117\108\69\43\70\120\111\68\86\76\75\73\78\99\78\89\51\119\84\89\67\86\55\98\53\106\101\97\43\97\56\106\111\115\86\98\98\87\68\72\79\87\80\54\52\110\69\48\120\108\121\85\106\70\66\74\122\79\103\57\87\98\51\99\116\52\51\107\102\53\81\79\51\121\102\119\52\114\112\111\85\97\51\113\83\90\110\112\75\107\119\101\87\65\118\90\51\90\56\108\74\74\51\103\82\73\119\82\121\109\57\111\56\110\70\101\50\43\88\56\82\74\117\110\114\88\80\76\102\68\120\76\82\54\43\66\54\109\52\90\48\106\110\74\102\84\103\103\76\80\104\76\103\81\98\69\75\55\85\55\113\54\83\102\101\51\73\48\79\120\84\98\79\43\89\69\103\110\75\67\100\50\100\83\66\49\56\90\73\102\119\111\43\65\100\108\71\65\86\88\48\50\48\77\117\78\67\106\100\89\108\110\75\71\72\109\115\99\72\49\109\107\47\113\106\70\65\117\117\99\66\89\104\72\109\48\71\77\49\119\47\86\48\57\68\48\117\48\80\99\116\43\109\69\111\99\76\83\69\100\71\74\119\87\51\114\73\121\107\119\72\121\103\105\101\85\47\101\90\112\70\50\119\47\48\47\115\69\106\76\71\48\118\83\78\75\99\97\111\48\48\117\80\50\74\108\116\105\57\117\104\54\85\48\53\85\84\84\54\89\117\66\120\79\56\108\110\99\72\52\107\108\47\83\43\56\72\87\90\66\115\81\49\89\84\71\112\43\100\52\103\105\107\86\75\49\108\116\98\66\107\53\67\122\97\111\69\79\79\104\119\100\113\82\110\115\69\54\72\115\107\52\75\98\98\81\49\50\116\118\48\76\79\50\84\112\50\114\72\122\50\80\75\83\74\101\106\122\120\97\111\82\53\77\89\80\70\47\104\53\56\103\84\83\114\106\102\117\121\99\77\113\99\102\112\86\105\111\121\47\104\65\111\116\51\111\100\89\109\49\49\47\120\75\79\114\122\81\66\103\117\54\116\83\86\57\110\75\102\102\76\119\122\49\67\82\121\47\84\110\47\103\104\115\68\121\122\102\47\84\75\101\73\106\76\43\70\74\51\80\99\82\80\56\54\83\68\85\65\112\118\111\79\109\115\116\119\67\105\88\53\104\65\97\90\86\77\74\98\106\56\119\108\82\80\90\71\77\72\106\88\115\68\43\108\108\66\109\109\98\97\101\65\105\121\72\116\116\86\67\50\111\53\102\120\47\49\107\51\85\86\67\86\43\65\76\43\74\78\110\103\74\85\116\99\65\112\65\111\81\116\106\51\118\72\68\97\81\50\116\82\48\97\75\105\81\113\115\88\120\43\110\110\77\67\90\65\87\116\113\109\82\69\74\117\87\108\114\71\48\97\81\74\53\90\66\106\57\47\97\99\109\113\89\79\86\102\51\103\100\74\105\75\79\114\73\112\83\104\100\84\71\79\51\66\53\104\73\73\69\65\114\85\106\57\43\66\73\102\70\122\47\43\98\97\70\72\109\122\51\75\120\113\102\69\82\82\49\52\84\76\51\101\90\87\115\78\81\81\78\84\115\55\78\114\105\99\72\107\87\86\48\54\120\122\75\70\53\118\66\71\76\85\86\87\120\110\71\104\73\65\87\85\79\79\98\109\99\97\111\51\84\73\49\104\112\55\121\102\81\100\98\43\71\113\87\116\71\70\88\118\52\50\116\69\118\88\120\97\43\69\66\80\89\114\99\56\50\56\56\86\50\55\72\121\114\86\43\121\56\106\84\106\77\105\67\99\99\65\80\81\97\65\111\56\116\57\110\70\106\70\66\66\121\114\68\49\80\89\82\105\54\99\98\110\105\48\75\85\49\68\79\43\99\54\122\68\82\77\110\82\74\101\72\100\79\81\103\112\89\78\117\66\72\118\114\107\67\73\120\115\80\103\116\99\43\54\115\81\100\51\104\119\54\55\87\79\116\108\101\83\97\77\120\84\56\49\88\43\65\109\119\76\65\105\100\86\82\54\68\53\105\120\111\102\55\43\70\54\85\75\117\70\56\85\80\53\107\105\85\83\121\116\43\51\85\112\52\116\88\100\90\121\81\98\118\84\78\56\66\110\55\47\116\86\87\98\106\89\99\48\89\117\101\113\78\104\111\83\107\99\75\121\43\103\66\47\105\50\79\85\57\75\73\43\88\108\55\84\97\69\50\98\43\73\67\73\76\78\84\71\101\103\117\54\115\43\119\100\76\104\76\108\55\113\89\48\48\102\43\100\120\110\72\109\87\54\83\108\54\69\78\101\100\52\90\107\106\116\110\55\113\102\97\67\112\108\57\89\108\99\75\104\104\117\90\71\70\90\90\48\88\51\110\100\66\110\121\99\79\118\107\121\115\112\115\115\78\121\53\80\116\102\100\76\79\87\74\70\114\122\122\90\121\102\112\84\108\109\77\103\70\101\52\89\85\71\82\69\54\120\49\54\73\97\90\82\121\119\84\73\85\116\76\70\80\117\100\86\101\69\80\48\69\86\122\116\78\118\51\99\121\74\74\52\108\55\88\82\88\109\99\49\101\56\65\88\97\76\100\98\84\51\119\102\117\85\43\118\110\76\76\111\97\103\69\111\83\90\43\103\89\55\78\108\79\57\120\108\110\105\90\119\100\47\47\85\67\121\113\114\56\66\50\117\76\43\90\104\74\106\109\76\115\77\52\76\103\70\51\70\102\112\68\83\121\87\65\118\103\51\109\48\83\107\77\84\54\51\86\121\75\83\49\65\110\48\113\88\85\52\104\67\57\120\98\48\53\104\49\76\121\55\122\122\121\120\117\81\122\65\76\113\111\121\107\67\73\82\112\50\87\74\109\56\66\109\43\49\53\102\83\77\48\107\52\109\80\68\55\90\55\79\118\107\66\75\89\90\70\114\47\81\47\83\50\98\122\51\98\120\55\101\108\51\115\102\85\72\56\69\121\122\98\115\88\53\100\121\47\51\70\86\86\67\98\54\47\121\106\83\52\72\101\82\102\86\108\80\115\54\43\113\110\74\53\47\74\114\78\79\110\121\115\47\72\100\99\121\83\90\97\99\54\98\100\103\113\47\116\115\98\112\116\54\110\81\72\110\120\82\82\121\66\79\111\76\49\104\112\68\86\85\112\97\70\108\76\111\105\77\55\118\90\119\97\73\86\74\78\80\68\110\103\100\73\83\81\48\73\102\47\119\83\65\47\47\55\47\121\56\50\86\89\76\119\103\72\83\83\103\72\83\106\50\88\73\122\103\72\65\107\77\118\99\103\43\87\66\120\52\80\113\122\118\87\119\101\99\118\54\48\70\108\108\47\122\101\81\80\117\71\67\85\43\101\54\76\108\67\73\80\90\71\98\97\86\56\97\75\112\85\103\71\111\43\53\67\108\54\50\49\106\120\108\98\106\102\48\101\57\99\103\80\79\107\49\87\120\77\47\78\103\51\81\66\53\122\103\122\101\100\97\80\97\55\49\70\90\71\87\65\51\101\107\81\57\106\79\112\97\73\116\119\102\55\52\67\68\76\84\69\100\85\47\97\66\73\70\103\89\77\80\114\50\78\113\85\78\98\84\68\88\99\80\54\107\100\48\73\102\76\80\75\80\86\76\104\110\68\105\103\73\70\103\90\66\85\89\78\119\100\72\75\86\72\88\121\109\85\51\83\116\68\52\99\78\113\97\69\116\86\48\105\122\82\43\79\100\108\98\52\49\118\51\68\49\89\111\90\55\56\69\55\81\104\88\87\53\86\48\97\90\108\84\109\66\118\88\115\101\121\110\105\102\83\74\90\69\82\114\105\122\85\69\111\120\67\56\48\122\102\48\100\66\73\112\97\70\112\116\118\116\90\55\55\56\72\49\70\53\98\73\77\103\81\66\73\84\116\111\86\81\110\78\66\105\70\53\112\76\65\83\104\90\98\102\119\71\101\103\74\72\83\79\50\102\107\111\67\76\84\101\118\68\111\77\86\112\74\89\113\73\57\122\122\112\77\108\47\81\109\77\89\122\51\79\85\84\89\102\43\73\118\108\121\75\116\52\51\48\112\50\97\114\108\120\90\89\106\65\110\52\83\50\109\87\76\51\70\78\100\76\105\84\116\53\67\73\70\43\112\121\78\113\99\51\85\104\54\105\86\78\83\83\68\103\114\68\66\111\121\111\116\103\80\101\76\78\82\47\48\84\103\66\83\68\49\54\66\114\119\68\84\47\67\110\90\119\90\50\69\68\75\120\75\109\88\55\78\90\82\55\99\112\50\66\88\115\97\50\107\99\75\106\67\112\103\54\72\82\101\55\47\102\87\49\80\49\116\122\112\56\67\115\55\107\112\55\97\83\107\73\83\108\115\99\80\114\54\81\102\78\88\120\86\68\66\122\120\118\89\66\113\105\115\75\70\112\88\70\82\70\87\103\52\121\113\114\121\118\66\101\43\114\90\108\111\97\57\102\100\74\117\66\67\65\50\90\99\82\57\88\116\119\87\98\108\109\48\67\83\70\48\119\76\72\120\117\51\72\117\99\56\71\104\115\54\103\71\85\85\57\98\113\72\57\105\65\119\51\67\112\99\73\73\84\43\71\55\85\76\84\109\71\57\69\112\69\107\55\76\74\52\82\65\108\113\50\66\90\73\111\104\50\75\52\54\120\81\112\74\72\85\104\47\69\71\81\88\83\104\100\116\80\73\100\57\88\83\67\117\65\102\110\108\71\105\105\121\120\69\84\71\47\55\88\84\75\56\53\73\73\114\114\103\111\83\120\87\82\115\118\78\78\49\85\120\106\86\120\52\101\119\89\113\50\66\50\83\83\85\87\103\47\50\56\65\106\88\100\116\48\76\105\57\121\111\108\89\88\114\85\120\80\70\86\71\81\49\106\73\85\77\111\55\73\90\119\81\83\90\122\119\81\102\54\77\66\86\82\83\82\90\111\83\117\120\84\111\109\110\90\84\110\75\83\72\74\81\80\52\67";local CRYPTEDlIIllIII='cGdGMyktdmIsIzp7eE5xViI=';local CRYPTEDlIIllIIl='lol you have to stop trying to deobfuscate';local CRYPTEDlIIlIIlI=function(a,b)local c=CRYPTEDlIIlIlIl(CRYPTEDlIIlIllI(a))local d=c["\99\105\112\104\101\114"](c,CRYPTEDlIIlIllI(b))return CRYPTEDlIIlIllI(d)end;local CRYPTEDlIIllIIl='lol you have to stop trying to deobfuscate';local CRYPTEDlIIllIll='\101\108\73\57\77\88\78\110\76\49\115\108\85\81\61\61';local CRYPTEDlIIllIlI='QHZiQkloTlA+cEtBQWl3MDMzUA==';local CRYPTEDlIIlIIII='Oz8/NGtZYjtDaUkrRkErWloyOyNzUyVycTolSjNqJDQwaE4=bi12PyZmUDh0RiF1';function CRYPTEDlIIlIlll(a,b)local c=CRYPTEDlIIlIllI(a,b);local d=CRYPTEDlIIllIlI;return c,d end;return CRYPTEDlIIlIlII(CRYPTEDlIIlIIlI(CRYPTEDlIIllIll,CRYPTEDlIIlIIIl),fev(0))()end)()
